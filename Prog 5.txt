#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

char encryptChar(char plainChar, char keyChar) {
if (!isalpha(plainChar))
return plainChar;

char base = isupper(plainChar) ? 'A' : 'a';
return ((plainChar - base + keyChar - 'a') % ALPHABET_SIZE) + base;
}

char decryptChar(char cipherChar, char keyChar) {
if (!isalpha(cipherChar))
return cipherChar;

char base = isupper(cipherChar) ? 'A' : 'a';
int shift = (keyChar - 'a') % ALPHABET_SIZE;
char decrypted = cipherChar - shift;
if (decrypted < base) {
decrypted += ALPHABET_SIZE;
}
return decrypted;
}

void polyalphabeticEncrypt(char *plaintext, char *key, char *ciphertext) {
int plaintextLen = strlen(plaintext);
int keyLen = strlen(key);
int i, j = 0;

for (i = 0; i < plaintextLen; i++) {
if (isalpha(plaintext[i])) {
ciphertext[i] = encryptChar(plaintext[i], key[j % keyLen]);
j++;
} else {
ciphertext[i] = plaintext[i];
}
}
ciphertext[i] = '\0';
}

void polyalphabeticDecrypt(char *ciphertext, char *key, char *decrypted) {
int ciphertextLen = strlen(ciphertext);
int keyLen = strlen(key);
int i, j = 0;

for (i = 0; i < ciphertextLen; i++) {
if (isalpha(ciphertext[i])) {
decrypted[i] = decryptChar(ciphertext[i], key[j % keyLen]);
j++;
} else {
decrypted[i] = ciphertext[i];
}
}
decrypted[i] = '\0';
}

int main() {
char plaintext[100];
char key[100];

printf("Enter the plaintext: ");
fgets(plaintext, sizeof(plaintext), stdin);
printf("Enter the key: ");
fgets(key, sizeof(key), stdin);

plaintext[strcspn(plaintext, "\n")] = '\0';
key[strcspn(key, "\n")] = '\0';

char ciphertext[strlen(plaintext) + 1];
char decrypted[strlen(plaintext) + 1];

polyalphabeticEncrypt(plaintext, key, ciphertext);
printf("Encrypted text: %s\n", ciphertext);

polyalphabeticDecrypt(ciphertext, key, decrypted);
printf("Decrypted text: %s\n", decrypted);

return 0;
}